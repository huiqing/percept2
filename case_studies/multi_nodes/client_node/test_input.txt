%% =====================================================================
%%@doc Returns all the variables, including both variable name and 
%%     define location, that are visible to `Node'. 
%%@spec env_vars(syntaxTree())-> [{atom(), pos()}]

-spec(env_vars(Node::syntaxTree())-> [{atom(), pos()}]).
env_vars(Node) ->
    Ann = refac_syntax:get_ann(Node),
    case lists:keyfind(env, 1, Ann) of
        {env, Vs} ->
            Vs;
        false ->
            []
    end.

%%@doc Returns all the variable names that are visible to `Node'. 
%%@spec env_var_names(syntaxTree())-> [atom()]

-spec(env_var_names(Node::syntaxTree())-> [atom()]).
env_var_names(Node) ->
    element(1, lists:unzip(env_vars(Node))).

%%=====================================================================
%%@doc Returns all the variables, including both variable name and define
%%      location, that are declared within `Node', and also used by the 
%%      code outside `Node'.
%%@spec exported_vars([syntaxTree()]|syntaxTree())-> [{atom(),pos()}]

-spec(exported_vars(Node::[syntaxTree()]|syntaxTree())-> [{atom(),pos()}]).
exported_vars(Nodes) when is_list(Nodes) ->
    Range = start_end_loc(Nodes),
    lists:flatmap(fun (Node) -> 
                          exported_vars_1(Node, Range)
                  end, Nodes);
exported_vars(Node) ->
    Range = start_end_loc(Node),
    exported_vars_1(Node, Range).

exported_vars_1(Node, {StartLoc, EndLoc}) ->
    Fun = fun (N, Acc) ->
                  Ann = refac_syntax:get_ann(N),
                  case lists:keyfind(use,1,Ann) of 
                      {use, Locs} ->
                          case [L||L<-Locs, L>EndLoc orelse L < StartLoc] of
                              [] -> Acc;
                              _ ->
                                  Name = refac_syntax:variable_name(N),
                                  Pos = refac_syntax:get_pos(N),
                                  ordsets:add_element({Name,Pos}, Acc)
                          end;
                      false ->
                          Acc
                  end
          end,
    ordsets:to_list(ast_traverse_api:fold(Fun,ordsets:new(),Node)).
 
%%@doc Returns all the variable names that are declared within `Node', and 
%%    also used by the code outside `Node'.
%%@spec exported_var_names([syntaxTree()]|syntaxTree())-> [atom()]

-spec(exported_var_names(Node::[syntaxTree()]|syntaxTree())-> [atom()]).
exported_var_names(Node) ->            
    element(1, lists:unzip(exported_vars(Node))).


%%=====================================================================
%%@doc Returns all the variables, including both variable name and define
%%      location, that are declared within `Node'.
%%@spec bound_vars([syntaxTree()]|syntaxTree())-> [{atom(),pos()}]

-spec(bound_vars(Node::[syntaxTree()]|syntaxTree())-> [{atom(),pos()}]).
bound_vars(Nodes) when is_list(Nodes) ->
    lists:usort(lists:flatmap(fun (Node) -> 
                                      bound_vars(Node) 
                              end, Nodes));
bound_vars(Node) ->
    Fun = fun (N, Acc) ->
                  Ann = refac_syntax:get_ann(N),
                  case lists:keyfind(bound,1,Ann) of
                      {bound, Vs} ->
                          Vs ++ Acc;
                      false ->
                          Acc
                  end
          end,
    Vars=ast_traverse_api:fold(Fun, [], Node),
    lists:usort(Vars).

%%@doc Returns all the variable names that are declared within `Node'.
%%@spec bound_var_names([syntaxTree()]|syntaxTree())-> [atom()]

-spec(bound_var_names(Node::[syntaxTree()]|syntaxTree())-> [atom()]).
bound_var_names(Node)->                
    element(1, lists:unzip(bound_vars(Node))).


%%=====================================================================
%%@doc Returns all the variables, including both variable name and define
%%      location, that are free within `Node'.
%%@spec free_vars([syntaxTree()]|syntaxTree())-> [{atom(),pos()}]

-spec(free_vars(Node::[syntaxTree()]|syntaxTree())-> [{atom(),pos()}]).
free_vars(Nodes) when is_list(Nodes) ->
    {FVs, BVs} = lists:unzip([{free_vars(Node), bound_vars(Node)}
                              ||Node<-Nodes]),
    lists:usort(lists:append(FVs)) -- lists:usort(lists:append(BVs));

free_vars(Node) ->
    Ann = refac_syntax:get_ann(Node),
    case lists:keyfind(free,1,Ann) of 
        {free, Vs} ->
            Vs;
        false ->
            []
    end.

%%@doc Returns all the variable names that are free within `Node'.
%%@spec free_var_names([syntaxTree()]|syntaxTree())-> [atom()]

-spec(free_var_names(Node::[syntaxTree()]|syntaxTree())-> [atom()]).
free_var_names(Node) ->
    element(1, lists:unzip(free_vars(Node))).

%% =============================================================================
%%@doc Returns the syntax context of `Node'.
%%@spec syntax_context(syntaxTree()) -> atom()
-spec(syntax_context(Node::syntaxTree()) ->atom()).
syntax_context(Node) ->
    Ann = refac_syntax:get_ann(Node),
    case lists:keysearch(syntax_path, 1, Ann) of
        {value, {syntax_path, P}} -> P;
        false ->
            throw({error, "Wrangler internal error "
                   "in refac_api:syntax_context/1"})
    end.
   
%% ================================================================================
%%@doc Returns the syntax category of `Node'.
%%@spec syntax_category(syntaxTree()) -> pattern|expression|guard_expression|unknown
-spec(syntax_category(Node::syntaxTree()) -> 
             pattern|expression|guard_expression|operator|
             generator|record_type|record_field|macro_name|
             unknown).
syntax_category(Node) ->
    As = refac_syntax:get_ann(Node),
    case lists:keyfind(category, 1, As) of 
        {category, C} ->
            C;
        false ->
            unknown
    end.

%% =============================================================================
%%@doc Returns `true' if `Node' represents a guard expression, otherwise `false'.
%%@spec is_guard_expr(Node:: syntaxTree())-> boolean()

-spec(is_guard_expr(Node:: syntaxTree())-> boolean()).
is_guard_expr(Node) ->
    syntax_category(Node) == guard_expression.
   
   
%%========================================================================
%%@doc Returns `true' if `Node' represents an expression (either a general
%%     expression or a guard expression), otherwise `false'.
%%@spec is_expr(syntaxTree())-> boolean()

-spec(is_expr(Node:: syntaxTree())-> boolean()).
is_expr(Node) ->
    C = syntax_category(Node),
    C==guard_expression orelse C==expression.
  
%%=====================================================================
%%@doc Returns `true' if `Node' represents a pattern, otherwise `false'.
%%@spec is_pattern(syntaxTree())-> boolean()

-spec(is_pattern(Node:: syntaxTree())-> boolean()).
is_pattern(Node) ->
    syntax_category(Node) == pattern.
  
%% =====================================================================
%%@doc Returns all the functions that are exported by an Erlang file.
%%@spec exported_funs(filename()) -> [{atom(),integer()}]

-spec(exported_funs/1::(File::filename()) -> [{Function::atom(), Arity::integer()}]).
exported_funs(File) ->
    {ok, {_, Info}} = wrangler_ast_server:parse_annotate_file(File, true),
    case lists:keysearch(exports, 1, Info) of
        {value, {exports, Funs}} ->
            Funs;
        false ->
            []
    end.

%%@doc Returns all the functions that are (auto)imported by an Erlang file.
%%@spec imported_funs(filename()) -> [{modulename(),functionname(),integer()}]
imported_funs(File) ->
    case  refac_api:get_module_info(File) of 
        {error, Reason} ->
              throw({error, Reason});
        {ok, ModInfo} ->
            case lists:keyfind(imports,1,ModInfo) of 
                {imports, MFAs} ->
                    MFAs;
                _ ->
                    []
            end
    end.

%%@doc Returns all the functions that are imported from `ModuleName' by an Erlang file.
%%@spec imported_funs(filename(), modulename()) -> [{functionname(),integer()}]
imported_funs(File, ModuleName) ->    
    case  refac_api:get_module_info(File) of 
        {error, Reason} ->
            throw({error, Reason});
        {ok, ModInfo} ->
            case lists:keyfind(imports,1,ModInfo) of 
                {imports, MFAs} ->
                    case lists:keyfind(list_to_atom(ModuleName), 1, MFAs) of 
                        {_, FAs}->FAs;
                        _ -> []
                    end;
                _ -> []
            end
    end.
  
%% =====================================================================
%% @doc Returns all the functions that are in-scope in the current module.
%%      An in-scope function could be an (auto-)imported function, or a 
%%      function that is defined in the current module.
%%@spec inscope_funs(filename()) -> [{atom(), integer()}]

-spec(inscope_funs/1::(filename()) -> [Function::{atom(), Arity::integer()}]).
inscope_funs(FileOrModInfo) ->
  case filelib:is_regular(FileOrModInfo) of
      true ->
          {ok, {_, Info}} = wrangler_ast_server:parse_annotate_file(FileOrModInfo, true),
          inscope_funs(Info);
      false ->
          inscope_funs_1(FileOrModInfo)
  end.      
inscope_funs_1(ModInfo) ->
    Imps = case lists:keysearch(imports, 1, ModInfo) of
               {value, {imports, I}} ->
                   lists:append(
                     [lists:map(fun ({F, A}) ->
                                        {M1, F, A} 
                                end, Fs) 
                      || {M1, Fs} <- I]);
               _ -> []
           end,
    case lists:keysearch(module, 1, ModInfo) of
        {value, {module, M}} ->
            Funs = case lists:keysearch(functions, 1, ModInfo) of
                       {value, {functions, Fs}} ->
                           lists:map(fun ({F, A}) ->
                                             {M, F, A}
                                     end, Fs);
                       _ -> []
                   end,
            PreDefinedFuns=[{M, module_info, 1}, 
                            {M, module_info, 2}, 
                            {M, record_info, 2}],
            Imps ++ Funs ++ PreDefinedFuns;
        _ -> Imps
    end.
   

%% =====================================================================
%% @doc Returns all the functions that are defined by an Erlang file.
%%@spec defined_funs(filename()) -> [{atom(),integer()}]

-spec(defined_funs/1::(filename()) -> [{Function::atom(), Arity::integer()}]).
defined_funs(File) ->
    {ok, {_, Info}} = wrangler_ast_server:parse_annotate_file(File, true),
    case lists:keysearch(functions, 1, Info) of
        {value, {functions, Funs}} ->
            Funs;
        false ->
            []
    end.

%% =====================================================================
%% @doc Returns the AST representation of an Erlang file.
%%@spec get_ast(filename()) -> syntaxTree()|{error, errorInfo()}
-spec(get_ast(File::filename()) -> syntaxTree()|{error, term()}).
get_ast(File) ->
    case wrangler_ast_server:parse_annotate_file(File, true) of 
        {ok, {AST, _}} ->
            {ok, AST};
        {error, Reason} ->
            {error, Reason}
    end.

%% =====================================================================
%% @doc Returns the module-level information about the Erlang file.
%% ```-record(module_info, 
%%         {module,
%%          exports, 
%%          module_imports,
%%          imports,
%%          attributes,
%%          records,
%%          errors,
%%          warnings,
%%          functions}). '''
%%@spec get_module_info(filename()) -> #module_info{}|{error, errorInfo()}

-record(module_info, 
        {module ::atom(),
         exports ::[{atom(), integer()}],
         module_imports,
         imports,
         attributes,
         records,
         errors,
         warnings,
         functions}).      
       
-spec(get_module_info(File::filename()) -> #module_info{}|{error, term()}).
get_module_info(File) ->
    case wrangler_ast_server:parse_annotate_file(File, true) of 
        {ok, {_AST, ModuleInfo}} ->
            {ok, ModuleInfo};
        {error, Reason} ->
            {error, Reason}
    end.

%%=====================================================================
%%@doc Returns those files, included in `SearchPaths', which use/import
%%     some of the functions defined in `File'.
%%@spec client_files(filename(),[filename()|dir()]) -> [filename()]

-spec(client_files(filename(),[filename()|dir()]) -> [filename()]).
client_files(File, SearchPaths) ->
    wrangler_modulegraph_server:get_client_files(File, SearchPaths).


%% =====================================================================
%%@doc Returns true if `{FunName, Arity}' is exported by the Erlang module
%%     defined in `File'.
%%@spec is_exported({atom(),integer()}, filename()) -> boolean()
-spec (is_exported({FunName::atom(), Arity::integer()}, File::filename())
       -> boolean()).
is_exported({FunName, Arity}, FileOrModInfo) ->
    case filelib:is_regular(FileOrModInfo) of
        true ->
            {ok, {_, ModInfo}} = wrangler_ast_server:parse_annotate_file(FileOrModInfo, true),
            is_exported_1({FunName, Arity}, ModInfo);
        false ->
            is_exported_1({FunName, Arity}, FileOrModInfo)
    end.

is_exported_1({FunName, Arity}, ModInfo) ->
    ImpExport = case lists:keysearch(attributes, 1, ModInfo) of
                    {value, {attributes, Attrs}} -> 
                        lists:member({compile, export_all}, Attrs);
                    false -> false
                end,
    ExpExport=  case lists:keysearch(exports, 1, ModInfo) of
                    {value, {exports, ExportList}} ->
                        lists:member({FunName, Arity}, ExportList);
                    _ -> false
                end,
    ImpExport or ExpExport.

%% =====================================================================
%%@doc Returns `true' if `Node' represents an attribute 
%%     of name `Name'.
%%@spec is_attribute(syntaxTree(), atom()) -> boolean()
-spec(is_attribute(Node::syntaxTree(), Name::atom()) ->
             boolean()).
is_attribute(Node, Name) ->
    case refac_syntax:type(Node) of 
        attribute ->
            AttrName =refac_syntax:attribute_name(Node),
            refac_syntax:atom_value(AttrName)==Name;
        _ ->
            false
    end.

%% =====================================================================
%%@doc Returns `true' if `Node' represents an import attribute  that
%%     imports module `ModName'
%%@spec is_import(syntaxTree(), atom()) -> boolean()
-spec(is_import(Node::syntaxTree(), Name::atom()) ->
             boolean()).
is_import(Node, ModName) ->
    case refac_syntax:type(Node) of 
        attribute ->
            AttrName =refac_syntax:attribute_name(Node),
            refac_syntax:atom_value(AttrName)==import andalso
                element(1, element(4, refac_syntax:revert(Node)))==ModName;
        _ ->
            false
    end.

%% =====================================================================
%%@doc Tokenises an Erlang file, and returns the tokens.
%%@spec tokenize(filename(), boolean(), integer()) -> [token()]|{error, term()}

-spec(tokenize(File::filename(), WithLayout::boolean(), TabWidth::integer()) 
      -> [token()]|{error, term()}).
tokenize(File, WithLayout, TabWidth) ->
    case file:read_file(File) of
        {ok, Bin} ->
            S = erlang:binary_to_list(Bin),
            case WithLayout of 
                true -> 
                    {ok, Ts, _} = refac_scan_with_layout:string(
                                    S, {1,1}, TabWidth, 
                                    refac_misc:file_format(File)),
                    Ts;
                _ -> {ok, Ts, _} = refac_scan:string(
                                     S, {1,1}, TabWidth,
                                     refac_misc:file_format(File)),
                     Ts
            end;
        {error, Reason} ->
            {error, Reason}
    end.


%% =====================================================================
%% @doc Returns the define location of the variable represented by `Node'; 
%% [{0,0}] is returned is the variable is a free variable or `Node' is 
%% not properly annotated.
%%@spec variable_define_pos(syntaxTree()) ->[pos()]

-spec(variable_define_pos(Node::syntaxTree()) ->[pos()]).
variable_define_pos(Node) ->
    case refac_syntax:type(Node) of 
        variable ->
            As = refac_syntax:get_ann(Node),
            case lists:keysearch(def,1,As)  of
                {value, {def, Pos}} ->
                    Pos;
                false->
                    [{0,0}]
            end;
        _->
            erlang:error(bagarg)
    end.

%% ================================================================================
%% @doc Returns the MFA information attached a node that represents a 
%%  function name or a qualified function name. `unknown' is returned is 
%%  no MFA information is annotated to this node or `Node' does not 
%%  represent a function name.
%%@spec fun_define_info(syntaxTree()) ->{modulename(), functionname(), arity()}|unknown

-spec(fun_define_info(Node::syntaxTree()) ->
             {modulename(), functionname(), arity()}|
             unknown).
fun_define_info(Node) ->
    Ann = refac_syntax:get_ann(Node),
    case lists:keysearch(fun_def,1, Ann) of
        {value, {fun_def, {M, F, A, _, _}}} ->
            {M,F,A};
        _ ->
            case lists:keysearch(type,1, Ann) of
                {value, {type, {f_atom, [M,F,A]}}} ->
                    {M,F,A};
                _ -> unknown
            end
    end.
    
%% =====================================================================
%% @doc Returns the function form that defines `MFA'; none is returns if no 
%% such function definition found.
%% @spec mfa_to_fun_def(mfa(), filename()|syntaxTree) ->syntaxTree()|none
-spec (mfa_to_fun_def(mfa(), filename()|syntaxTree) ->syntaxTree()|none).
mfa_to_fun_def(MFA,FileOrTree) ->
    case filelib:is_regular(FileOrTree) of 
        true ->
            case wrangler_ast_server:parse_annotate_file(FileOrTree, true) of 
                {ok, {AnnAST, _}} ->
                    mfa_to_fundef_1(AnnAST,MFA);
                {error, Reason} ->
                    {error, Reason}
            end;
        false ->
            case is_tree(FileOrTree) of 
                true ->
                    mfa_to_fundef_1(FileOrTree, MFA);
                false ->
                    erlang:error(bagarg)
            end
    end.
mfa_to_fundef_1(AnnAST, {M,F,A}) ->
    Forms=refac_syntax:form_list_elements(AnnAST),
    Fun = fun(Form) ->
                  Ann= refac_syntax:get_ann(Form),
                  case lists:keysearch(fun_def, 1, Ann) of
                      {value, {fun_def, {M, F, A, _, _}}} ->
                          false;
                      _ -> true
                  end
          end,
    case lists:dropwhile(Fun, Forms) of
        [Form|_] ->
            Form;
        _ ->
            none
    end.
   
%%=====================================================================
%%@doc Returns the name of the module defined in `File', 
%%@spec module_name(filename()) -> modulename()
-spec (module_name(File::filename()) -> modulename()).
module_name(File) ->
    case wrangler_ast_server:parse_annotate_file(File, true) of 
        {ok, {_AST, ModuleInfo}} ->
            case lists:keysearch(module,1, ModuleInfo) of
                {value, {module, ModName}} ->
                    {ok, ModName};
                false ->
                    {error, "Wrangler failed to the module name"}
            end;
        {error, Reason}->
            {error, Reason}
    end.


%% =====================================================================
%%@doc Inserts an attribute before the first function definition.
%%@spec insert_an_attr(syntaxTree(), attribute()) -> syntaxTree()
insert_an_attr(AST, Attr) ->
    Forms = refac_syntax:form_list_elements(AST),
    {Forms1, Forms2} = lists:splitwith(
                       fun(F) ->
                               refac_syntax:type(F)==attribute orelse
                               refac_syntax:type(F)==comment
                       end, Forms),
    {Forms12, Forms11} = lists:splitwith(fun(F) ->
                                                refac_syntax:type(F)==comment
                                        end, lists:reverse(Forms1)),
    NewForms=lists:reverse(Forms11)++[Attr]++lists:reverse(Forms12)++Forms2,
    refac_syntax:form_list(NewForms).

%% =====================================================================
%%@doc Remove `F/A' from the entity list of the import attribute 
%%     represented by `Node'.
%%@spec remove_from_import(attribute(), {functionname(), arity()}) -> attribute()
remove_from_import(Node, _FA={F,A}) ->
    case is_attribute(Node, import) of 
        true ->
            Name = refac_syntax:attribute_name(Node),
            Args = refac_syntax:attribute_arguments(Node),
            NewArgs=case Args of 
                        [M, L]  ->
                            L0 = refac_syntax:list_elements(L),
                            L1 = [E ||E<-L0, {refac_syntax:atom_value(
                                                refac_syntax:arity_qualifier_body(E)),
                                              refac_syntax:integer_value(
                                                refac_syntax:arity_qualifier_argument(E))} /={F,A}],
                            [M, refac_misc:rewrite(L, refac_syntax:list(L1))];
                        _ -> Args
                    end,
            refac_misc:rewrite(Node, refac_syntax:attribute(Name, NewArgs));
        false ->
            {error, bagarg}
    end.

%% =======================================================================
%%@doc Adds an entity `FAtoAdd' to the export list of an export attribute
%%     right after another entity `FA'; if `FA' is `none' then append 
%%     the new entity to the end of the export list.
%%@spec add_to_export_after(attribute(), fa(), fa()|none) -> attribute()
%% @type fa() = {functionname(), arity()}
add_to_export_after(Node, FAtoAdd, FA) ->
    {F, A} = FAtoAdd,
    case is_attribute(Node, export) of
        true ->
            Name = refac_syntax:attribute_name(Node),
            [L] = refac_syntax:attribute_arguments(Node),
            AQ = refac_syntax:arity_qualifier(refac_syntax:atom(F),
                                              refac_syntax:integer(A)),
            NewL=case FA of
                     none ->
                         refac_misc:rewrite(L, lists:reverse([AQ|L]));
                     {F1,A1} ->
                         L0 = refac_syntax:list_elements(L),
                         L1 = lists:append([begin
                                                FunName = refac_syntax:atom_value(
                                                            refac_syntax:arity_qualifier_body(E)),
                                                Arity = refac_syntax:integer_value(
                                                          refac_syntax:arity_qualifier_argument(E)),
                                                case {FunName, Arity} of
                                                    {F1,A1} ->
                                                        [E, AQ];
                                                    _ -> [E]
                                                end
                                            end || E <- L0]),
                         refac_misc:rewrite(L, refac_syntax:list(L1))
                 end,
            refac_misc:rewrite(Node, refac_syntax:attribute(Name, [NewL]));
        false ->
            erlang:error(badarg)
    end.
    
%%=================================================================
%% @doc Returns `true' if `Tree1' and `Tree2' are syntactically the
%%      same up to normalization. The normalization process includes 
%%      consistent variable renaming and turning un-qualified 
%%      function calls into qualified function calls. 
%%@spec equal(syntaxTree(), syntaxTree()) -> boolean()

-spec (equal(Tree1::syntaxTree(), Tree2::syntaxTree()) -> boolean()).
equal(Tree1, Tree2) ->
    NewTree1=mask_variables(Tree1),
    NewTree2=mask_variables(Tree2),
    {ok, Ts1, _} = erl_scan:string(refac_prettypr:format(NewTree1)),
    {ok, Ts2, _} = erl_scan:string(refac_prettypr:format(NewTree2)),
    case refac_misc:concat_toks(Ts1) == refac_misc:concat_toks(Ts2) of
        true ->
            refac_code_search_utils:var_binding_structure(Tree1) ==
                refac_code_search_utils:var_binding_structure(Tree2);
        false->
            false
    end.

mask_variables(Exp) when is_list(Exp) ->
    [mask_variables(E) || E <- Exp];
mask_variables(Exp) ->
    ast_traverse_api:full_buTP(
      fun (Node, _Others) ->
              do_mask_variables(Node)
      end, Exp, {}).

do_mask_variables(Node) ->
    case refac_syntax:type(Node) of
        variable ->
            refac_syntax:default_literals_vars(Node, '&');
        _ ->
            Node
    end.

%%=================================================================
%%@private
splice(Expr) when is_list(Expr) ->
    splice_1(Expr);
splice(Expr) ->
    refac_prettypr:format(Expr).

splice_1([E]) ->
    refac_prettypr:format(E);
splice_1([E|Es]) ->  
    refac_prettypr:format(E)++","++splice_1(Es).

%%@private
quote(Str) ->    
    parse_annotate_expr(Str).

%%===================================================================
%%
%%@private
parse_annotate_expr("") ->
    refac_syntax:empty_node();
parse_annotate_expr(ExprStr) ->
    parse_annotate_expr(ExprStr, {1,1}).
%%@private
parse_annotate_expr("", _) ->
    refac_syntax:empty_node();
parse_annotate_expr(ExprStr, StartLoc) when is_integer(StartLoc) ->
    parse_annotate_expr(ExprStr, {StartLoc, 1});
parse_annotate_expr(ExprStr, StartLoc) when is_tuple(StartLoc) ->
    case refac_scan:string(ExprStr, StartLoc) of
        {ok, Toks, _} ->
            [T|Ts] = lists:reverse(Toks),
            Toks1 = case T of 
                        {dot, _} -> Toks;
                        {';',_} -> lists:reverse([{dot, 999}|Ts]);
                        _ -> Toks++[{dot, 999}]
                    end,
            Toks2 = refac_epp_dodger:scan_macros(Toks1,[]),
            case refac_parse:parse_form(Toks2) of 
                {ok, AbsForm} ->
                    case refac_syntax:type(AbsForm) of 
                        function ->
                            Form1 =refac_epp_dodger:fix_pos_in_form(Toks, AbsForm),
                            Form2 =  refac_syntax_lib:annotate_bindings(Form1),
                            Cs = refac_syntax:function_clauses(Form2),
                            case {Cs, T} of 
                                {[C], {';',_L}} ->
                                    Name = refac_syntax:function_name(Form2),
                                    refac_misc:rewrite(C, refac_syntax:function_clause(Name, C));
                                _ ->
                                    Form2
                            end;
                        _ ->
                            refac_epp_dodger:fix_pos_in_form(Toks, AbsForm)
                    end;
                {error, Reason} ->
                    case refac_parse:parse_exprs(Toks2) of
                        {ok, Exprs} ->
                            Exprs1 =refac_epp_dodger:rewrite_list(Exprs),
                            Exprs2 = make_tree({block, StartLoc, Exprs1}),
                            Exprs3=refac_syntax_lib:annotate_bindings(Exprs2),
                            Exprs4 =refac_syntax:block_expr_body(Exprs3),
                            case Exprs4 of 
                                [E] -> E;
                                _ -> Exprs4
                            end;
                        {error, Reason} ->
                            throw({error, Reason})
                    end
            end;
        {error, ErrInfo, ErrLoc} ->
            throw({error, {ErrInfo, ErrLoc}})
    end.

make_tree(Tree) ->
    case refac_syntax:subtrees(Tree) of 
        [] ->
           Tree;
        Gs ->
            Gs1 = [[make_tree(T) || T <- G] || G <- Gs],
            refac_syntax:update_tree(Tree, Gs1)
    end.




%%=================================================================
%%@private
subst(Expr, Subst) when is_list(Expr) ->
    [subst(E, Subst)||E<-Expr];

subst(Expr, Subst) ->
    {Expr1, _} =ast_traverse_api:stop_tdTP(fun do_subst/2, Expr, Subst),
    Expr2=expand_meta_clauses(Expr1),
    %% refac_io:format("Expr2:\n~p\n", [Expr2]),
    remove_fake_begin_end(Expr2).
 
do_subst(Node, Subst) ->
    case refac_syntax:type(Node) of
        variable ->
            VarName = refac_syntax:variable_name(Node),
            case lists:keysearch(VarName, 1, Subst) of
                {value, {VarName, Expr}} ->
                    case is_meta_list_variable(VarName) andalso
                        is_list(Expr) of 
                        true -> 
                            case Expr of 
                                [] -> {refac_syntax:list(Expr), true};
                                [E] ->
                                    %% No longer can guarantee the correctness of annotations.
                                    {reset_pos_and_range(E), true};
                                _ ->
                                    E1=refac_syntax:add_ann(
                                         {fake_block_expr, true},
                                         %%refac_syntax:block_expr(Expr)),
                                         reset_pos_and_range(
                                           refac_syntax:block_expr(Expr))),
                                    {E1, true}
                            end;
                        false ->
                            E1=reset_pos_and_range(Expr),
                            {E1,  true}
                    end;
                _ -> {Node, false}
            end;
        atom ->
            AtomValue = refac_syntax:atom_value(Node),
            case is_meta_atom_name(AtomValue) of
                true ->
                    case lists:keysearch(AtomValue, 1, Subst) of
                        {value, {AtomValue, Expr}} ->
                            {reset_pos_and_range(Expr), true};
                        false ->
                            {Node, false} %% TODO: SHOULD ISSUE AN ERROR MSG HERE!!!
                    end;
                _ ->
                    {Node, false} 
            end;
        _ -> {Node, false}
    end.
                                   
